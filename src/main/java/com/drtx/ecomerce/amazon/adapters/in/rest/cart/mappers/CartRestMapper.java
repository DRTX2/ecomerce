package com.drtx.ecomerce.amazon.adapters.in.rest.cart.mappers;

import com.drtx.ecomerce.amazon.adapters.in.rest.cart.dtos.CartRequest;
import com.drtx.ecomerce.amazon.adapters.in.rest.cart.dtos.CartResponse;
import com.drtx.ecomerce.amazon.adapters.out.persistence.product.ProductPersistenceMapper;
import com.drtx.ecomerce.amazon.core.model.Cart;
import com.drtx.ecomerce.amazon.core.model.Product;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.Named;

import java.util.List;

@Mapper(componentModel = "spring", uses =  {ProductPersistenceMapper.class})
public interface CartRestMapper {
    @Mapping(target = "products", source = "products", qualifiedByName = "mapIdsToProducts")
    @Mapping(target = "user", ignore = true) // Assuming user is set elsewhere
    @Mapping(target = "id", ignore = true) // Assuming id is generated by the system
    Cart toDomain(CartRequest request);

    CartResponse toResponse(Cart domain);

    @Named("mapIdsToProducts")
    static List<Product> mapIdsToProducts(
            List<Long> productIds
    ) {
        if (productIds == null || productIds.isEmpty()) {
            return List.of();
        }
        return productIds.stream()
                .map(prodId->{
                    Product product = new Product();
                    product.setId(prodId);
                    // Assuming you have a method to fetch the product by ID
                    // This is just a placeholder, replace with actual fetching logic
                 return product;
                })
                .toList();
    }
}
